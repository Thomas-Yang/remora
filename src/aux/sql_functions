#!/bin/bash

#========================================================================
# HEADER
#========================================================================
#% DESCRIPTION
#% sql_functions
#%
#% This file implements a set of auxiliary functions for managing SQLITE
#% databases
#%
#========================================================================
#- IMPLEMENTATION
#-      version     REMORA 1.6
#-      authors     Carlos Rosales (carlos@tacc.utexas.edu)
#-                  Antonio Gomez  (agomez@tacc.utexas.edu)
#-      license     MIT
#
#========================================================================
#  HISTORY
#       2015/11/29: Initial version
#========================================================================
#

# Location of the REMORA database
REMORADB=$HOME/.remora.db

# Current version of the database
REMORADB_VERSION=1.6;

sqlite3 $REMORADB "PRAGMA foreign_keys = ON"

# Function that returns the version stored in the main table of the database
check_db_version()
{
    version=sqlite3 $REMORADB "SELECT version FROM remora_info";
    return version
}

# Function that returns a boolean indicating whether the database already exists
check_db_exists()
{
    if [ -f $REMORADB ];
    then
        return 1
    else
        return 0
    fi
}

# This function creates the database for REMORA. It assumes that the database doesn't
# already exist
# For version 1.6, the tables are the following (this is documented in the REMORA
# repository (https://github.com/TACC/remora):
#
#           remora_info                         jobs
#                                                |
#         ______________________________________________________________________________________________
#           |          |             |            |         |           |         |         |
#         numa    memory_usage    cpu_usage    network     IB    mic/gpu_usage   lustre    dvs
create_database()
{
    sqlite3 $REMORADB "CREATE TABLE remora_info (version INTEGER, date INTEGER)";
    sqlite3 $REMORADB "INSERT INTO remora_info VALUES ($REMORADB_VERSION, `date +'%s'`)";
    sqlite3 $REMORADB "CREATE TABLE jobs (id INTEGER PRIMARY KEY, time_start INTEGER, time_end INTEGER, commmand TEXT, path TEXT, nodes TEXT)";
    sqlite3 $REMORADB "CREATE TABLE memory_usage (jobid INTEGER, timestamp INTEGER, node TEXT, vmemmax REAL, vmem REAL, rmemmax REAL, rmem REAL, shmem REAL, memfree REAL, totalmax REAL, PRIMARY KEY(jobid, timestamp, node), FOREIGN KEY(jobid) REFERENCES jobs(id))";
    sqlite3 $REMORADB "CREATE TABLE cpu_usage (jobid INTEGER, timestamp INTEGER, node TEXT, cpuid INTEGER, usage REAL, FOREIGN KEY(jobid) REFERENCES jobs(id), PRIMARY KEY(jobid, timestamp, cpuid, node))" ;
    sqlite3 $REMORADB "CREATE TABLE lustre_usage (jobid INTEGER, timestamp INTEGER, node TEXT, fs_name TEXT, requests INTEGER, read INTEGER, write INTEGER, PRIMARY KEY (jobid, timestamp, node), FOREIGN KEY(jobid) REFERENCES jobs(id))";
    sqlite3 $REMORADB "CREATE TABLE ib_usage (jobid INTEGER, timestamp INTEGER, node TEXT, packets INTEGER, PRIMARY KEY(jobid, timestamp, node), FOREIGN KEY(jobid) REFERENCES(jobs(id))";
    # Do we want to have a table with all the nodes in the system?
    # And with all the switches?
    sqlite3 $REMORADB "CREATE TABLE network (jobid INTEGER, FOREIGN KEY(jobid) REFERENCES jobs(id))"; # Finish this
    sqlite3 $REMORADB "CREATE TABLE numa_usage (jobid INTEGER, timestamp INTEGER, node TEXT, node0hit REAL, node1hit REAL, node0miss REAL, node1miss REAL, node0local REAL, node1local REAL, node0other REAL, node1other REAL, node0free REAL, node1free REAL, node0used REAL, node1used REAL, FOREIGN KEY(jobid) REFERENCES jobs(id), PRIMARY KEY(jobid, timestamp, nodeid))";
    sqlite3 $REMORADB "CREATE TABLE gpu_usage (jobid INTEGER, timestamp INTEGER, node TEXT, memused REAL, PRIMARY KEY (jobid, timestamp, node), FOREIGN KEY(jobid) REFERENCES(jobs(id))";
    sqlite3 $REMORADB "CREATE TABLE mic_usage (jobid INTEGER, timestamp INTEGER, node TEXT, memused REAL, PRIMARY KEY (jobid, timestamp, node), FOREIGN KEY(jobid) REFERENCES(jobs(id))";
}
}

# This function takes as arguments the following values:
#   - jobid
#   - timestamp
#   - node
#   - vmemmax: max virt. mem. used by the users' processes
#   - vmem: current virt. mem. used
#   - rmemmax: max resident memory used
#   - rmem: current resident memory used
#   - shmem: shmem memory currently used
#   - memfree: current available memory
#   - totalmax: overal peak memory used during the execution of the job
insert_memory_usage() {
    if [ "$#" -ne 10 ]; then
        print_error " Incorrect syntax: insufficient arguments. "
    else
        sqlite3 $REMORADB "INSERT INTO memory_usage (jobid, timestamp, node, vmemmax, vmem, rmemmax, rmem, shmem, memfree, totalmax) VALUES ($1, $2, '$3', $4, $5, $6, $7, $8, $9, $10)";
    fi
}


# This function takes as arguments the following values:
#   - jobid
#   - timestamp
#   - node
#   - packets: number of packets sent
insert_ib_usage() {
    if [ "$#" -ne 4 ]; then
        print_error " Incorrect syntax: insufficient arguments. "
    else
        sqlite3 $REMORADB "INSERT INTO ib_usage (jobid, timestamp, node, packets) VALUES ($1, $2, '$3', $4)";
    fi
}
# This function takes as arguments the following values:
#   - jobid
#   - timestamp
#   - fs_name
#   - cpu_id
#   - usage
insert_cpu_usage() {
    if [ "$#" -ne 5 ]; then
        print_error " Incorrect syntax: insufficient arguments. "
    else
        sqlite3 $REMORADB "INSERT INTO cpu_usage (jobid, timestamp, node, cpu_id, usage) VALUES ($1, $2, '$3', '$4', $5)";
    fi
}

# This function takes as arguments the following values:
#   - jobid
#   - timestamp
#   - filesystem name (HOME, WORK, SCRATCH,...)
#   - requests
insert_lustre_usage() {
    if [ "$#" -ne 6 ]; then
        print_error " Incorrect syntax: insufficient arguments. "
    else
        sqlite3 $REMORADB "INSERT INTO lustre_usage (jobid, timestamp, fsname, requests, read, write) VALUES ($1, $2, '$3', '$4', '$5', '$6')";
    fi
}

# This function takes as arguments the following values:
#   - jobid
#   - timestamp
#   - node_id (name of the node)
insert_numa_usage() {
    if [ "$#" -ne 5 ]; then
        print_error " Incorrect syntax: insufficient arguments. "
    else
        sqlite3 $REMORADB "INSERT INTO numa_usage (jobid, timestamp, node_id, node0hit, node1hit, node0miss, node1miss, node0local, node1local, node0other, node1other, node0free, node1free, node0used, node1used) VALUES ($1, $2, '$3', $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15)";
    fi
}

insert_mic_usage() {
  if [ "$#" -ne 4 ]; then
    print_error "Incorrect syntax: insufficient arguments. "
  else
    sqlite3 $REMORADB "INSERT INTO mic_usage (jobid, timestamp, node, memused) VALUES ($1, $2, '$3', $4)";
  fi
}


insert_gpu_usage() {
  if [ "$#" -ne 4 ]; then
    print_error "Incorrect syntax: insufficient arguments. "
  else
    sqlite3 $REMORADB "INSERT INTO gpu_usage (jobid, timestamp, node, memused) VALUES ($1, $2, '$3', $4)";
  fi
}

# This function will need to be implemented: if the version of the database is older than
# the current version used, some tables will have changed.
update_database()
{
    print_error " This function is not yet implemented. "
}
