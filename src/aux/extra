#!/bin/sh
#
#========================================================================
# HEADER
#========================================================================
#% DESCRIPTION
#% extra
#%
#% DO NOT call this script directory. This is called by REMORA
#%
#% This script provides extra functionality used by REMORA
#========================================================================
#- IMPLEMENTATION
#-      version     REMORA 1.6
#-      authors     Carlos Rosales (carlos@tacc.utexas.edu)
#-                  Antonio Gomez  (agomez@tacc.utexas.edu)
#-      license     MIT
#
#========================================================================
#  HISTORY
#       2015/12/04: Initial version
#========================================================================


usage() { printf '\033[0;33mREMORA Howto\n\033[0m'; head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#+" | sed -e "s/^#+[ ]*//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g" ; }
usagefull() { head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#[%+-]" | sed -e "s/^#[%+-]//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g" ; }
scriptinfo() { head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#-" | sed -e "s/^#-//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g"; }
print_error() { printf '\033[0;31mREMORA Error: \033[0;34m '"$1"' \033[0m \n'; }

function show_time () {
  num=$1/1000000000
  ((milisec=($1/1000000)%1000))
  min=0
  hour=0
  day=0
  if((num>59));then
    ((sec=num%60))
    ((num=num/60))
    if((num>59));then
      ((min=num%60))
      ((num=num/60))
      if((num>23));then
        ((hour=num%24))
        ((day=num/24))
      else
        ((hour=num))
      fi
    else
      ((min=num))
    fi
  else
    ((sec=num))
  fi
  printf "%-29s %-1s %d%s %d%s %d%s %d%s %d%s\n" " Total Elapsed Time" ":" $day "d" $hour "h" $min "m" $sec "s" $milisec "ms" | tee -a $REMORA_OUTDIR/remora_summary.txt
}



check_running_parallel() {
    if [ -n "${PMI_ID+1}" ] || [ -n "${PMI_RANK+1}" ] || [ -n "${MPIRUN_RANK+1}" ]; then
        my_rank=$(( ${PMI_RANK-0} + ${PMI_ID-0} + ${MPIRUN_RANK-0} + ${OMPI_COMM_WORLD_RANK-0} + ${OMPI_MCA_ns_nds_vpid-0}  + ${ibrun_o_option-0} ))
        if [ "$my_rank" == "0" ]; then
            print_error "Incorrect syntax: REMORA can't run in parallel"
            usage
        fi
        kill -s TERM $REMORA_TOP_PID
    fi
}

parse_arguments() {
    # Check if help should be printed
    if [ "x$1" == "x--help" ]; then
        usagefull
        kill -s TERM $REMORA_TOP_PID
    fi

    # Check that we have at least some arguments
    if [ "x$1" == "x" ]; then
        print_error " Incorrect syntax: insufficient arguments. "
        usage
        kill -s TERM $REMORA_TOP_PID
    fi
}

parse_environment() {
    # Check if verbose output is required
    if [ -z "$REMORA_VERBOSE" ]; then
        export REMORA_VERBOSE=0
    fi
    if [ "x$REMORA_VERBOSE" == "x1" ]; then
        usagefull
    fi
    if [ -z "$REMORA_MODE" ]; then
        export REMORA_MODE=FULL
    fi

    if [ "$REMORA_MODE" != "FULL" ] && [ "$REMORA_MODE" != "BASIC" ]; then
        export REMORA_MODE=FULL
    fi

    # Check if the data collection period has been set by the user
    # If it has not, set it to a default of 10 seconds
    if [ -z "$REMORA_PERIOD" ]; then
        export REMORA_PERIOD=10
    fi
    # If data collection period is set to somethign lower than 1 second, reset it
    if [ "$REMORA_PERIOD" -lt "1" ]; then
        export REMORA_PERIOD=1
    fi

    # Enable only critical warnings by default
    # 0: disabel all warnings
    # 1: enable excessive memory and io usage warnings
    # 2: enable all warnings
    if [ -z "$REMORA_WARNING" ]; then
        export REMORA_WARNING=1
    fi

    echo "export REMORA_WARNING=$REMORA_WARNING" >> $REMORA_OUTDIR/remora_env.txt
    echo "export REMORA_MODE=$REMORA_MODE"       >> $REMORA_OUTDIR/remora_env.txt
    echo "export REMORA_PERIOD=$REMORA_PERIOD"   >> $REMORA_OUTDIR/remora_env.txt
    echo "export REMORA_VERBOSE=$REMORA_VERBOSE" >> $REMORA_OUTDIR/remora_env.txt

}

is_mpi_job() {
    # Doing this here because we want slurm hostlist check to run
    # to make sure we are in a compute node
# CRF 2016.01.27 - Why do we need this? We always get the hostlist from
#                  the scheduler, even for serial jobs...
    if [ "$REMORA_PARALLEL" == "0" ]; then
        NODES=`hostname -s`
    fi

    if [ -z $REMORA_PARALLEL ]; then
        REMORA_PARALLEL=0
    fi

    if [ -z $REMORA_SYMMETRIC ]; then
        REMORA_SYMMETRIC=0
    fi

    # Check if this is a sequential, parallel, or symmetric run
    if [ "x$1" == "xibrun" ] || [ "x$1" == "xmpirun" ] || [ "x$1" == "mpirun_rsh" ] || [ "x$1" == "xmpiexec" ] || [ "x$1" == "mpiexec.hydra" ]; then
        REMORA_PARALLEL=1
    elif [ "x$1" == "xibrun.symm" ]; then
        REMORA_PARALLEL=1
        REMORA_SYMMETRIC=1
    fi
    echo "export REMORA_PARALLEL=$REMORA_PARALLEL"   >> $REMORA_OUTDIR/remora_env.txt
    echo "export REMORA_SYMMETRIC=$REMORA_SYMMETRIC" >> $REMORA_OUTDIR/remora_env.txt
}

check_gpu() {
    # By default, do not collect GPU data
    if [ -z "$REMORA_CUDA" ]; then
        export REMORA_CUDA=0
    fi
    # If nvidia-smi is not present disable GPU collection even if it was requested
    gputest=$(nvidia-smi > /dev/null 2> /dev/null || echo "0")
    if [ "$gputest" == "0" ]; then
        if [ "$REMORA_CUDA" == "1" ]; then
            print_error " Missing GPU driver: disabling GPU collection"
        fi
        export REMORA_CUDA=0
    fi
    echo "export REMORA_CUDA=$REMORA_CUDA" >> $REMORA_OUTDIR/remora_env.txt    
}

check_cpu() {
# Check if CPU module is active
  if [ `grep cpu $REMORA_BIN/config/modules` ]; then 
    export REMORA_EFFECTIVE_PERIOD=$((REMORA_PERIOD-1))
  else
    export REMORA_EFFECTIVE_PERIOD=$REMORA_PERIOD
  fi
  echo "export REMORA_EFFECTIVE_PERIOD=$REMORA_EFFECTIVE_PERIOD" >> $REMORA_OUTDIR/remora_env.txt
}

init_folders() {
    CWD=`pwd`
    # Determing current work directory
    REMORA_OUTDIR=$CWD/remora_$REMORA_JOB_ID
    mkdir -p $REMORA_OUTDIR
    rm -rf $REMORA_OUTDIR/*
    # Determine directory for temporary files
    if [ -z "$REMORA_TMPDIR" ]; then
        export REMORA_TMPDIR=$REMORA_OUTDIR
    fi
    # Setup output subdirectories
    mkdir $REMORA_OUTDIR/INFO
    mkdir $REMORA_OUTDIR/CPU
    mkdir $REMORA_OUTDIR/IO
    mkdir $REMORA_OUTDIR/MEMORY
    mkdir $REMORA_OUTDIR/NETWORK
    mkdir $REMORA_OUTDIR/NUMA

    echo "export REMORA_OUTDIR=$REMORA_OUTDIR"  > $REMORA_OUTDIR/remora_env.txt
    echo "export REMORA_TMPDIR=$REMORA_TMPDIR" >> $REMORA_OUTDIR/remora_env.txt

    date >> $REMORA_OUTDIR/remora_timestamp.txt
    # Pass output directory name to parent remora script
    echo $REMORA_OUTDIR
}

capture_environment() {
    #Text file containing job report environmental variables and start-end timestamp
    #date >> $REMORA_OUTDIR/vars.txt
    #echo "" >> $REMORA_OUTDIR/vars.txt
    #echo "REMORA_TMPDIR    : $REMORA_TMPDIR"    >> $REMORA_OUTDIR/vars.txt 
    #echo "REMORA_PERIOD    : $REMORA_PERIOD"    >> $REMORA_OUTDIR/vars.txt
    #echo "REMORA_VERBOSE   : $REMORA_VERBOSE"   >> $REMORA_OUTDIR/vars.txt
    #echo "REMORA_MODE      : $REMORA_MODE"      >> $REMORA_OUTDIR/vars.txt
    #echo "REMORA_CUDA      : $REMORA_CUDA"      >> $REMORA_OUTDIR/vars.txt
    #echo "REMORA_PARALLEL  : $REMORA_PARALLEL"  >> $REMORA_OUTDIR/vars.txt
    #echo "REMORA_SYMMETRIC : $REMORA_SYMMETRIC" >> $REMORA_OUTDIR/vars.txt

    #Dump environment during run
    env > $REMORA_OUTDIR/runtime_env.txt
}
