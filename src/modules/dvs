#!/bin/sh
#
#========================================================================
# HEADER
#========================================================================
#% DESCRIPTION
#% dvs
#%
#% DO NOT call this script directly. This is called by REMORA
#%
#========================================================================
#- IMPLEMENTATION
#-      version     REMORA 1.6
#-      authors     Carlos Rosales (carlos@tacc.utexas.edu)
#-                  Antonio Gomez  (agomez@tacc.utexas.edu)
#-      license     MIT
#
#========================================================================
#  HISTORY
#       2015/12/08: Initial commit
#========================================================================

# All the functions take two arguments:
#  1.- The name of the node where this function is running
#  2.- The full path where the output will be stored/read

init_module_dvs()
{
    rm -f $2/dvs*
    if [ "$REMORA_SYMMETRIC" == "0" ]; then
        if [ "$REMORA_MODE" = "FULL" ]; then
            # Capture the names of the mounts (FSNAMES)
            idx=0; hdx=1
            HEADER=()
            FSNAMES=()
            HEADER[0]=`echo TIMESTAMP`
            for i in `ls /proc/fs/dvs/mounts`; do
                isBlacklisted=0
                currentName=$(basename `grep "remote-path" /proc/fs/dvs/mounts/$i/mount | awk '{print $2}'`)
                for elem in `cat $REMORA_BIN/config/fs_blacklist`; do
                    if [ "$currentName" == "$elem" ]; then isBlacklisted=1; fi
                done
                if [ "$isBlacklisted" == "0" ]; then
                    FSNAMES[$idx]=$currentName
                    HEADER[$hdx]=`echo "${FSNAMES[$idx]}-RQ"`
                    HEADER[$hdx+1]=`echo "${FSNAMES[$idx]}-RD"`
                    HEADER[$hdx+2]=`echo "${FSNAMES[$idx]}-WR"`
                    if [ "$REMORA_VERBOSE" == "1" ]; then
                        echo ${FSNAMES[$idx]}
                    fi
                    idx=$((idx+1))
                    hdx=$((hdx+3))
                fi
            done
            printf "%-17s"  "${HEADER[@]}" >> $2/dvs_$1.txt
            printf "\n"  >> $2/dvs_$1.txt
        fi
    fi
}

collect_data_dvs()
{
# Here we use dvs stat files, which are user-readable
# We can only provide metadata operations, since read and write volume data 
# do not seem to be available from any counter.
#
# There are three sections in every /proc/fs/dvs/mounts/*/stats file, with
# remote procedure call (RPC) stats, virtual file system (VFS) stats, and 
# inter-process communication (IPC) stats.
#
# RPC entries are like this:
# {RQ_NAME} {count_OK} {count_failed} {receive_OK} {receive_failed} {time_last_op} {max_time_hist}
# VFS entries are like this:
# {callback_name} {count_OK} {count_failed} {time_last_op} {max_time_hist}
# IPC entries are just (in bytes):
# read_min_max {min} {max}
# write_min_max {min} {max} 
#
# cat /proc/fs/dvs/mounts/1/stats
# RQ_LOOKUP: 61599 0 0 0 0.000 0.000
# RQ_OPEN: 2638 0 0 0 0.000 0.000
# ...
# 
    if [ "$REMORA_SYMMETRIC" == "0" ]; then
        if [ "$REMORA_MODE" = "FULL" ]; then
            local DVS_DIR_PATH=/proc/fs/dvs/mounts
            local TIMESTAMP=`date +%s`
            local idx=0
            local COUNTER=()
            col_id=0; idx=0
            for fs in "${FSNAMES[@]}"
            do
                if [ "$REMORA_VERBOSE" == "1" ]; then
                    echo "cat /proc/fs/dvs/mounts/$idx/stats | grep -e RQ_OPEN -e RQ_CLOSE -e RQ_READDIR -e RQ_CREATE -e RQ_UNLINK -e RQ_MKDIR -e RQ_RMDIR -e RQ_FLUSH -e RQ_RENAME -e RQ_SETATTR -e RQ_GETATTR | awk '{sum+=$2} END {print sum}'"
                fi
                COUNTER[$col_id]=`cat /proc/fs/dvs/mounts/$idx/stats | grep -e RQ_OPEN -e RQ_CLOSE -e RQ_READDIR -e RQ_CREATE -e RQ_UNLINK -e RQ_MKDIR -e RQ_RMDIR -e RQ_FLUSH -e RQ_RENAME -e RQ_SETATTR -e RQ_GETATTR | awk '{sum+=$2} END {print sum}'`
                COUNTER[$((col_id+1))]=`echo 0.00`
                COUNToR[$((col_id+2))]=`echo 0.00`
		col_id=$((col_id+3))
                idx=$((idx+1))
            done
            # This will have TIMESTAMP FS1_IOPS FS1_READ FS1_WRITE FS2_IOPS FS2_READ FS2_WRITE ....
            # in raw counters, not rates
            printf "%-17d %-17d" $TIMESTAMP "${COUNTER[@]}" >> $2/dvs_$1.txt
            printf "\n"  >> $2/dvs_$1.txt
        fi
    fi
}

# This function might perform some processing on the data.
# If nothing needs to be done, it can be empty (but declared)
process_data_dvs()
{
  :
}

finalize_module_dvs()
{
  REMORA_NODE_ID=$3
  if [ "$REMORA_NODE_ID" == "0" ]; then 
    # Capture the names of the mounts (FSNAMES)
    idx=0
    FSNAMES=()
    for i in `ls /proc/fs/dvs/mounts`; do
        FSNAMES[$idx]=$(basename `grep "remote-path" /proc/fs/dvs/mounts/$i/mount | awk '{print $2}'`)
        if [ "$REMORA_VERBOSE" == "1" ]; then
            echo ${FSNAMES[$idx]}
        fi
        idx=$((idx+1))
    done

    # Identify shortest entry
    min_len=0
    for file in `ls $2/dvs_*.txt`; do
       fs_col=2; len=0
       for FS in "${FSNAMES[@]}"; do
         len=`cat $file | tr -s ' ' | cut -d ' ' -f $fs_col | wc -l | awk '{print $1}'`
         if [ "$min_len" -eq "0" ] || [ "$len" -lt "$min_len" ]; then 
           min_len=$len
         fi
         fs_col=$((fs_col+3))
       done
     done
   
    # Generate file with aggregate counts from all nodes
    awk 'FNR>1 {a[FNR]=$1; for (j=2; j<=NF; j++) fs1[FNR,j]+=$j;} END {for (i=2; i<=FNR; i++){ printf "%d ",a[i]; for (j=2; j<=NF; j++){ printf "%d ",fs1[i,j]} printf "\n"} }' $2/dvs_*.txt > $2/dvs.tmp
    col_id=2
    for FS in "${FSNAMES[@]}"; do
      cut -d ' ' -f 1,$col_id,$((col_id+1)),$((col_id+2)) $2/dvs.tmp > $2/dvs.$FS
      col_id=$((col_id+3))
    done
    rm $2/dvs.tmp

    # Calculate actual data rates from raw counters
    # $1 = time; $2 = iops (usec); $3 = read (bytes); $4 = write (bytes)
    min_len=$((min_len-1))
    local d1=(); local d2=()
    for file in `ls $2/dvs.*`; do
      for i in `seq 1 $min_len`; do
        next=$((i+1))
        d1=(`sed "${i}q;d" $file | awk '{ print $1 " " $2 " " $3 " " $4}'`)
        d2=(`sed "${next}q;d" $file | awk '{ print $1 " " $2 " " $3 " " $4 }'`)
        fsio=`echo "scale=6; ( ${d2[1]} - ${d1[1]} ) / ( ( ${d2[0]} - ${d1[0]} ) )" | bc`
        fsrd=`echo "scale=6; ( ${d2[2]} - ${d1[2]} ) / ( 1000000.0 * ( ${d2[0]} - ${d1[0]} ) )" | bc`
        fswr=`echo "scale=6; ( ${d2[3]} - ${d1[3]} ) / ( 1000000.0 * ( ${d2[0]} - ${d1[0]} ) )" | bc`
        printf "%-17d %-17f %-17f %-17f\n" ${d1[0]} $fsio $fsrd $fswr >> $file.rate
      done
    done
  fi
}

store_data_db_dvs()
{
  :
}
