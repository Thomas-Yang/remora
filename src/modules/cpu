#!/bin/sh
#
#========================================================================
# HEADER
#========================================================================
#% DESCRIPTION
#% cpu
#%
#% DO NOT call this script directly. This is called by REMORA
#%
#========================================================================
#- IMPLEMENTATION
#-      version     REMORA 1.5
#-      authors     Carlos Rosales (carlos@tacc.utexas.edu)
#-                  Antonio Gomez  (agomez@tacc.utexas.edu)
#-      license     MIT
#
#========================================================================
#  HISTORY
#       2015/12/08: Initial commit
#========================================================================

# All the functions take two arguments:
#  1.- The name of the node where this function is running
#  2.- The full path where the output will be stored/read

init_module_cpu()
{
  rm -f $2/cpu*
}

collect_data_cpu()
{
  #Get CPU utilization
  #We use mpstat (installed with Remora) to collect this data
  mpstat -P ALL 1 1 | grep Average| awk '
  {
    for (i=2; i<=NF; i++)  {
        a[NR,i] = $i
    }
  }
  NF>p { p = NF }
  END {
    print " %time " systime();
    for(j=3; j<=p; j++) {
        if (j==2 || j==3 || j==5 || j==11) {
            str=""
        for(i=1; i<=NR; i++){
                if (i!=2) {
            str=str" "a[i,j];
            }
        }
        print str
        }
    }
  }' >> $2/cpu_$1.txt
}


# This function might perform some processing on the data.
# If nothing needs to be done, it can be empty (but declared)
process_data_cpu()
{
  :
}


finalize_module_cpu()
{
  :
}

store_data_db_cpu()
{
    local jobid=$REMORA_JOB_ID
    local files=($2/cpu_*.txt)
    local prefix="$2/cpu_"
    for file in "${files[@]}"; do
        local node=${file#$prefix}
        node=${node%.txt}
        local timestamp=0
        local prefix="%usr"
        while IFS='' read -r line || [[ -n "$line" ]]; do
            if [[ $line == *"time"* ]]; then
                timestamp = `echo $line | awk '{print $2;}'`
            elif [[ $line == *"usr"* ]]; then
                line=${line#$prefix}
                cpus_usage=($line)
                local idx=1
                for cpu_usage in "${cpus_usage[@]}"
                do
                    insert_cpu_usage $jobid $timestamp $node cpu$idx ${cpu_usage}
                    ((idx+=1))
                done
            fi
        done < "$file"
    done
}
